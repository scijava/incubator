package templates.adapt.lift

import main.plusAssign
import templates.Globals
import java.io.File

class ComputerToIterables(sourceDir: File) : Globals(sourceDir,
                                                     "org/scijava/ops/engine/adapt/lift",
                                                     "ComputerToIterables") {

    val arities = 1..maxArity

    fun iterableGenerics(arity: Int) = "<${genericParamTypes(arity).joinToString { "Iterable<$it>" }}>"

    fun classGenerics(arity: Int) = "<I, ${genericParamTypes(arity).joinToString()}>"

    fun iteratorsHaveNext(arity: Int) = when (arity) {
        0 -> "itrout.hasNext()"
        1 -> "itrin.hasNext() && itrout.hasNext()"
        else -> "${(1..arity).joinToString(" && ") { "itrin$it.hasNext()" }} && itrout.hasNext()"
    }

    fun iteratorsNext(arity: Int) = when (arity) {
        0 -> "itrout.next()"
        1 -> "itrin.next(), itrout.next()"
        else -> "${(1..arity).joinToString { "itrin$it.next()" }}, itrout.next()"
    }

    fun iteratorInputs(arity: Int) = (1..arity).joinToString { "in$it" } + "\""

    fun iteratorCtor(arity: Int): List<String> = when (arity) {
        0 -> emptyList()
        1 -> listOf("Iterator<I> itrin = in.iterator();")
        else -> (1..arity).map { "Iterator<I$it> itrin$it = in$it.iterator();" }
    } + "Iterator<O> itrout = out.iterator();"


    override fun generate(text: StringBuilder) {
        text += """/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import java.util.Iterator;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpCollection;

/**
 * Converts {@link Computers} operating on single types to {@link Computers}
 * that operate on {@link Iterable}s of types. N.B. it is the user's
 * responsibility to pass {@link Iterable}s of the same length (otherwise the Op
 * will stop when one of the {@link Iterable}s runs out of {@link Object}s).
 * 
 * @author Gabriel Selzer
 */
public class ComputerToIterables${classGenerics(maxArity)} implements OpCollection {
"""

        for (arity in 0..maxArity) {
            text += """	@OpField(names = "adapt")
	public final Function<${computerArity(arity)}${generics(arity)}, ${computerArity(arity)}${iterableGenerics(arity)}> liftComputer$arity = 
		(computer) -> {
			return (${computeArgs(arity)}) -> {"""

            for (a in iteratorCtor(arity))
                text += "\t\t\t\t$a"

            text += """				while (${iteratorsHaveNext(arity)}) {
					computer.compute(${iteratorsNext(arity)});
				}
			};
		};
"""
        }
        text += "}"
    }
}