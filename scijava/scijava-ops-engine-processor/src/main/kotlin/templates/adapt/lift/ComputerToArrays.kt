package templates.adapt.lift

import main.plusAssign
import templates.Globals
import java.io.File

class ComputerToArrays(sourceDir: File) : Globals(sourceDir,
                                                  "org/scijava/ops/engine/adapt/lift",
                                                  "ComputerToArrays") {

    val arities = 1..maxArity

    fun arrayGenerics(arity: Int) = "<${genericParamTypes(arity).joinToString { "$it[]" }}>"

    fun classGenerics(arity: Int) = "<I, ${genericParamTypes(arity).joinToString()}>"

    fun arraysAtPosI(arity: Int) = when(arity) {
        0 -> "out[i]"
        1 -> "in[i], out[i]"
        else -> "${(1..arity).joinToString { "in$it[i]" }}, out[i]"
    }


    override fun generate(text: StringBuilder) {
        text += """/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpCollection;

/**
 * Collection of ops designed to lift {@link Computers} to operate
 * on arrays. TODO: multi-threading support
 * 
 * @author Gabriel Selzer
 */
public class ComputerToArrays${classGenerics(maxArity)} implements OpCollection {

	private int minLength(Object[]... arrays) {
		int minLength = Integer.MAX_VALUE;
		for (Object[] array : arrays)
			if (array.length < minLength) minLength = array.length;
		return minLength;
	}
"""

        for(arity in 0..maxArity)
            text += """	@OpField(names = "adapt", params = "fromOp, toOp")
	public final Function<${computerArity(arity)}${generics(arity)}, ${computerArity(arity)}${arrayGenerics(arity)}> liftComputer$arity =
		(computer) -> {
			return (${computeArgs(arity)}) -> {
				int max = minLength(${computeArgs(arity)});
				for (int i = 0; i < max; i++) {
					computer.compute(${arraysAtPosI(arity)});
				}
			};
		};
"""

        text += "}"
    }
}