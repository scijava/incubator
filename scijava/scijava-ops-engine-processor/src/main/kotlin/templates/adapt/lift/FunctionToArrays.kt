package templates.adapt.lift

import main.plusAssign
import templates.Globals
import java.io.File

class FunctionToArrays(sourceDir: File) : Globals(sourceDir,
                                                  "org/scijava/ops/engine/adapt/lift",
                                                  "FunctionToArrays") {

    val arities = 1..maxArity

    fun arrayGenerics(arity: Int) = "<${genericParamTypes(arity).joinToString { "$it[]" }}>"

    fun classGenerics(arity: Int) = "<I, ${genericParamTypes(arity).joinToString()}>"

    fun arraysAtPosI(arity: Int) = when (arity) {
        0 -> ""
        1 -> "in[i]"
        else -> (1..arity).joinToString { "in$it[i]" }
    }

    fun arraysAtPos0(arity: Int) = when (arity) {
        0 -> ""
        1 -> "in[0]"
        else -> (1..arity).joinToString { "in$it[0]" }
    }


    override fun generate(text: StringBuilder) {
        text += """/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import java.lang.reflect.Array;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Functions;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpCollection;
import org.scijava.ops.spi.OpCollection;
import org.scijava.plugin.Plugin;

/**
 * Converts {@link Functions} operating on single types to {@link Functions}
 * that operate on arrays of types. N.B. it is the user's responsibility to pass
 * arrays of the same length (otherwise the Op will stop when one of the arrays
 * runs out of {@link Object}s).
 * 
 * @author Gabriel Selzer
 */
@Plugin(type = OpCollection.class)
public class FunctionToArrays${classGenerics(maxArity)} implements OpCollection{

	// TODO: extract logic to a utility class
	private int minLength(Object[]... arrays) {
		int minLength = Integer.MAX_VALUE;
		for (Object[] array : arrays)
			if (array.length < minLength) minLength = array.length;
		return minLength;
	}
	
	// NOTE: we cannot convert Producers since there is no way to determine the
	// length of the output array
"""

        for (arity in 1..maxArity)
            text += """	@OpField(names = "adapt", params = "fromOp, toOp")
	public final Function<${functionArity(arity)}${generics(arity)}, ${functionArity(arity)}${arrayGenerics(arity)}> liftFunction$arity =
		(function) -> {
			return (${applyArgs(arity)}) -> {
				int len = minLength(${applyArgs(arity)});
				if (len == 0) throw new UnsupportedOperationException("Unable to create an empty output array.");
				O component = function.apply(${arraysAtPos0(arity)});
				@SuppressWarnings("unchecked")
				O[] out = (O[]) Array.newInstance(component.getClass(), len);
				
				for (int i = 0; i < len; i++) {
					out[i] = function.apply(${arraysAtPosI(arity)});
				}
				return out;
			};
		};
"""

        text += "}"
    }
}