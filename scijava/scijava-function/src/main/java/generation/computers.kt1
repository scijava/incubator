package generation

import com.squareup.kotlinpoet.*

fun Computers() {

    val arities = 0..maxArity
    val init = arities.map { "ALL_COMPUTERS.put(Computers.Arity$it.class, $it);" }.toTypedArray()

    val computers = TypeSpec.objectBuilder("Computers1")
        .addKdoc("""|Container class for computer-style functional interfaces at various
                    |[arities](https://en.wikipedia.org/wiki/Arity).
                    
                    
                    |A computer has functional method `compute` with a number of arguments
                    |corresponding to the arity, plus an additional argument for the preallocated
                    |output to be populated by the computation.
                    
                    
                    
                    |Each computer interface implements a corresponding [Consumer]-style
                    |interface (see [Consumers]) with arity+1; the consumer's `accept`
                    |method simply delegates to `compute`. This pattern allows computer ops
                    |to be used directly as consumers as needed.
                    
                    
                    |@author Curtis Rueden
                    |@author Gabriel Selzer""".trimMargin())
        .addProperty(PropertySpec.builder("ALL_COMPUTERS", TypeVariableName("HashMap<Class<*>, Int>"))
                         .initializer("Hashmap()")
                         .addKdoc("""|All known computer types and their arities. The entries are sorted by
                                     |arity, i.e., the `i`-th entry has an arity of `i`.""".trimMargin())
                         .build())
        .addInitializerBlock(buildCodeBlock {
            arities.forEach { add("ALL_COMPUTERS.put(Computers.Arity$it.class, $it);\n") }
        })
        .addFunction(FunSpec.builder("isComputer")
                         .addKdoc("""|@return `true` if the given type is a known
                                     |computer type, `false` otherwise. <br></br>
                                     |Note that only the type itself and not its type hierarchy is
                                     |considered.
                                     |@throws NullPointerException If `c` is `null`.""".trimMargin())
                         .addParameter("c", TypeVariableName("Class<*>"))
                         .addStatement("return ALL_COMPUTERS.containsKey(c)")
                         .returns(Boolean::class)
                         .build())
    for (arity in arities) {
        val rawClass = "Arity$arity"
        val genericParams = generics(arity)
        val gClass = "$rawClass$genericParams"
//        println("gClass=$gClass")
        computers.addType(
            TypeSpec.interfaceBuilder(rawClass)
                .addAnnotation(FunctionalInterface::class)
                .addTypeVariable(TypeVariableName(genericParams))
                .addSuperinterface(TypeVariableName("${consumerArity(arity)}<$genericParams>"))
                .addFunction(FunSpec.builder("compute")
                                 .addParameters()
                                 .build())
                .build()
                         )
        //        @FunctionalInterface
        //        public interface $gClass extends
        //        $consumerArity.call($arity)$genericParams
        //        {
        //
        //            void compute ($computeParams.call($arity));
        //
        //            @Override
        //            default void accept($acceptParams.call($arity))
        //            {
        //                compute($computeArgs.call($arity));
        //            }
        //        }
        //        #end##foreach($arity)
    }

    val file = FileSpec.builder("org.scijava.function", "Computers1")
        .addComment(
            """This is autogenerated source code -- DO NOT EDIT. Instead, edit the
corresponding template in templates/ and rerun bin/generate.groovy.""")
        .addType(computers.build())
        .build()

    file.writeTo(System.out)
}