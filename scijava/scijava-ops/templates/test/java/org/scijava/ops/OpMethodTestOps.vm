/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package org.scijava.ops;

import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.ops.core.OpCollection;
import org.scijava.ops.function.Computers;
import org.scijava.ops.function.Functions;
import org.scijava.ops.function.Inplaces;
import org.scijava.ops.function.Producer;
import org.scijava.param.Parameter;
import org.scijava.plugin.Plugin;
import org.scijava.struct.ItemIO;

@Plugin(type = OpCollection.class)
public class OpMethodTestOps {

	// -- Functions -- //
	@OpMethod(names = "test.multiplyNumericStrings", type = Producer.class)
	@Parameter(key = "multipliedNumericStrings", itemIO = ItemIO.OUTPUT)
	public static Integer multiplyNumericStringsProducer() {
		return Integer.valueOf(1);
	}
#foreach($arity in [1..$maxArity])

	@OpMethod(names = "test.multiplyNumericStrings", type = ${functionArity.call($arity)}.class)
	public static Integer multiplyNumericStringsFunction$arity($stringInputs.call($arity))
	{
		Integer out = Integer.valueOf(1);
		
#foreach($a in [1..$arity])
		out *= Integer.parseInt(in${a});
#end

		return out;
	}
#end

	// -- Computers -- //
	
	@OpMethod(names = "test.doubleList", type = Computers.Arity0.class)
	public static void doublesToListArity1(List<Double> output) {
		output.clear();
	}
#foreach($arity in [1..$maxArity])

	@OpMethod(names = "test.doubleList", type = ${computerArity.call($arity)}.class)
	public static void doublesToList$arity($stringInputs.call($arity)#if($arity > 0),#{else}#end List<Double> output) {
		output.clear();
		
#foreach($a in [1..$arity])
		output.add(Double.parseDouble(in$a));
#end
	}
#end

	// -- Inplaces -- //

#foreach($arity in [1..$maxArity])
#foreach($a in [1..$arity])

	@OpMethod(names = "test.addDoubles$inplaceSuffix.call($arity, $a)", type = ${inplaceType.call($arity, $a)}.class)
	public static void addDoubles$inplaceSuffix.call($arity, $a)($doubleInputs.call($arity, $a)) {
		for (int i = 0; i < io.length; i++) {
#foreach($input in $inputOnlyInplaceArgs.call($arity, $a))
			io[i] += ${input}[i];
#end
		}
	}
#end
#end
}
