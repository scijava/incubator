/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

package org.scijava.ops.core.function;

import static org.junit.Assert.assertTrue;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.junit.Test;
import org.scijava.ops.AbstractTestEnvironment;
import org.scijava.ops.function.Computers;
import org.scijava.ops.function.Functions;
import org.scijava.ops.function.Inplaces;
import org.scijava.ops.function.Producer;
import org.scijava.types.GenericTyped;
import org.scijava.types.Nil;

/**
 * Tests whether the following Op types are wrapped by the Op matcher. We do
 * this by checking to make sure that they are a {@link GenericTyped}.
 * 
 * @author Gabriel Selzer
 */
public class OpWrappersTest extends AbstractTestEnvironment {

	@Test
	public void testWrapProducer() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Producer<Double> op = Functions.match(ops, "test.addDoubles", nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

#foreach($arity in [1..$maxArity])
	@Test
	public void testWrapFunction$arity() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		$functionArity.call($arity)$doubleTypeParams.call($arity) op = //
			Functions.match(ops, "test.addDoubles", //
				$nilDoubleList.call($arity));
		assertTrue(op instanceof GenericTyped);
	}

#end
#foreach($arity in [1..$maxArity])
	@Test
	public void testWrapComputer$arity() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		$computerArity.call($arity)$doubleArrayTypeParams.call($arity) op = //
			Computers.match(ops, "test.addArrays", $nilDoubleList.call($arity));
		assertTrue(op instanceof GenericTyped);
	}

#end
#foreach($arity in [1..$maxArity])
#foreach($a in [1..$arity])
#set($t = $arity - 1)
	@Test
	public void testWrapInplace$inplaceSuffix.call($arity, $a)() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		$inplaceType.call($arity, $a)$doubleArrayTypeParams.call($t) op = //
			Inplaces.$matchName.call($arity, $a)(ops, "test.mulArrays${arity}_${a}", $nilDoubleList.call($t));
		assertTrue(op instanceof GenericTyped);
	}

#end
#end
}
