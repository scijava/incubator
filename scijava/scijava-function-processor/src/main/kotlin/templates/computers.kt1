package templates

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import main.*

class Computers_gen(generator: CodeGenerator) : Globals() {


    init {

        generator.createNewFile(dependencies = Dependencies(false),
                      packageName = "org.scijava.function",
                      fileName = "Computers").use {

            val text = StringBuilder()

            text +=
                """/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */
package org.scijava.function

import java.util.HashMap
import java.lang.FunctionalInterface
import java.util.function.BiConsumer
import java.util.function.Consumer

/**
 * Container class for computer-style functional interfaces at various
 * [arities](https://en.wikipedia.org/wiki/Arity).
 *
 *
 * A computer has functional method `compute` with a number of arguments
 * corresponding to the arity, plus an additional argument for the preallocated
 * output to be populated by the computation.
 *
 *
 *
 * Each computer interface implements a corresponding [Consumer]-style
 * interface (see [Consumers]) with arity+1; the consumer's `accept`
 * method simply delegates to `compute`. This pattern allows computer ops
 * to be used directly as consumers as needed.
 *
 *
 * @author Curtis Rueden
 * @author Gabriel Selzer
 */
object Computers {
    // -- Static Utility Methods -- //
    /**
     * All known computer types and their arities. The entries are sorted by
     * arity, i.e., the `i`-th entry has an arity of `i`.
     */
    val ALL_COMPUTERS: HashMap<Class<*>, Int> = HashMap()

    init {"""
            val arities = 0..maxArity
            for (arity in arities)
                text += "\t\tALL_COMPUTERS[Arity$arity::class.java] = $arity"
            text +=
                """    }
                
    /**
     * @return `true` if the given type is a known
     * computer type, `false` otherwise. <br></br>
     * Note that only the type itself and not its type hierarchy is
     * considered.
     * @throws NullPointerException If `c` is `null`.
     */
    infix fun isComputer(c: Class<*>): Boolean = ALL_COMPUTERS.containsKey(c)
    """
            for (arity in arities) {
                val rawClass = "Arity$arity"
                val genericParams = generics(arity)
                val gClass = "$rawClass$genericParams"
                text += """    
    @FunctionalInterface interface $gClass : ${consumerArity(arity)}$genericParams {
        fun compute(${computeParams(arity)})
        override fun accept(${acceptParams(arity)}) = compute(${computeArgs(arity)})
    }"""
            }
            text += "}"
            it.write(text.toString().toByteArray())
        }
    }
}