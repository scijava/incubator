package templates

import main.plusAssign
import java.io.File

class Functions(sourceDir: File) : Globals(sourceDir, "Functions") {

    val arities = 3..maxArity

    fun genericsO2(arity: Int): String =
        if (arity == 0) "<O2>"
        else
            "<${(1..arity).joinToString { "I$it" }}, O2>"

    fun matchParams(arity: Int): String {
        val generics = genericParamTypes(arity)
        val names = genericsNamesList(arity)
        return (0..arity).joinToString { "final Nil<${generics[it]}> ${names[it]}Type" }
    }

    fun nilArgs(arity: Int): String {
        val names = genericsNamesList(arity).toMutableList()
        val out = names.removeLast()
        names.add(0, out)
        return names.joinToString { "${it}Type" }
    }

    fun objectGenerics(arity: Int): String =
        if (arity == 0) "<O>"
        else
            "<${(1..arity).joinToString { "Object" }}, O>"

    fun insArgs(arity: Int): String =
        if (arity == 0) ""
        else
            (0 until arity).joinToString { "ins[$it]" }

    fun javadocLink(arity: Int): String = when (arity) {
        0 -> "org.scijava.function.Producer"
        1 -> "java.util.function.Function"
        2 -> "java.util.function.BiFunction"
        else -> "Arity$arity"
    }

    fun wildcardGenerics(arity: Int): String =
        if (arity == 0) "<O>"
        else
            "<${(1..arity).joinToString { "?" }}, O>"

    fun fMethod(arity: Int) = if (arity == 0) "create" else "apply"

    override fun generate(text: StringBuilder) {

        text += """/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

package org.scijava.function;

import java.util.HashMap;
import java.util.Objects;
import java.util.function.BiFunction;
import java.util.function.Function;
"""
        val pound = '#'
        text += """
/**
 * Container class for
 * higher-<a href="https://en.wikipedia.org/wiki/Arity">arity</a>
 * {@link Function}-style functional interfaces&mdash;i.e. with functional
 * method {@code apply} with a number of arguments corresponding to the arity.
 * <ul>
 * <li>For 0-arity (nullary) functions, use {@link Producer} (and notice the
 * functional method there is named {@link Producer${pound}create()}).</li>
 * <li>For 1-arity (unary) functions, use {@link Function}.</li>
 * <li>For 2-arity (binary) functions, use {@link BiFunction}.</li>
 * </ul>
 *
 * @author Curtis Rueden
 * @author Gabriel Selzer
 */
public final class Functions {

	private Functions() {
		// NB: Prevent instantiation of utility class.
	}

	/**
	 * All known function types and their arities. The entries are sorted by
	 * arity, i.e., the {@code i}-th entry has an arity of {@code i}.
	 */
	public static final HashMap<Integer, Class<?>> ALL_FUNCTIONS;

	static {
		ALL_FUNCTIONS = new HashMap<>(10);"""
        for (arity in 0..maxArity)
            text += "\t\tALL_FUNCTIONS.put($arity, ${functionArity(arity)}.class);"
        text += """	}

	/**
	 * @return {@code true} if the given type is a known
	 *         function type, {@code false} otherwise.<br>
	 *         Note that only the type itself and not its type hierarchy is
	 *         considered.
	 * @throws NullPointerException If {@code c} is {@code null}.
	 */
	public static boolean isFunction(Class<?> c) {
		return ALL_FUNCTIONS.containsValue(c);
	}
"""
        for (arity in arities) {
            text += """/**
 * A $arity-arity specialization of {@link Function}.
 *"""
            for (a in 1..arity)
                text += "\t* @param <I$a> the type of argument $a to the function"

            text += """	 * @param <O> the type of the output of the function
	 * @see Function
	 */
	@FunctionalInterface
	public interface Arity$arity${generics(arity)} {

		/**
		 * Applies this function to the given arguments.
		 *"""
            for (a in 1..arity)
                text += "\t\t* @param in$a function argument $a"

            text += """		 * @return the function output
		 */
		O apply(${applyParams(arity)});

		/**
		 * Returns a composed function that first applies this function to its
		 * input, and then applies the {@code after} function to the result. If
		 * evaluation of either function throws an exception, it is relayed to the
		 * caller of the composed function.
		 *
		 * @param <O2> the type of output of the {@code after} function, and of the
		 *          composed function
		 * @param after the function to apply after this function is applied
		 * @return a composed function that first applies this function and then
		 *         applies the {@code after} function
		 * @throws NullPointerException if after is null
		 */
		default <O2> Arity$arity${genericsO2(arity)} andThen(Function<? super O, ? extends O2> after)
		{
			Objects.requireNonNull(after);
			return (${applyParams(arity)}) -> after.apply(apply(${applyArgs(arity)}));
		}
	}
"""
        }
        text+="""	public interface ArityN<O> {

		O apply(Object... ins);

		Object getOp();
	}

	/**
	 * Converts a {@link org.scijava.function.Producer} to a {@link ArityN}.
	 * 
	 * @param <O> the type variable linked the output of the {@link org.scijava.function.Producer}
	 * @param f the {@link org.scijava.function.Producer} to be converted into a {@link ArityN}
	 * @return a {@link ArityN} created from the {@link org.scijava.function.Producer}
	 */
	public static <O> Functions.ArityN<O> nary(Producer<O> f) {

		return new ArityN<>() {

			@Override
			public O apply(Object... ins) {
				return f.create();
			}

			@Override
			public Producer<O> getOp() {
				return f;
			}
		};
	}"""
        for(arity in 1..maxArity)
            text+="""
	/**
	 * Converts a {@link ${javadocLink(arity)}} to a {@link ArityN}.
	 * 
	 * @param <O> the type variable linked the output of the {@link ${javadocLink(arity)}}
	 * @param f the {@link ${javadocLink(arity)}} to be converted into a {@link ArityN}
	 * @return a {@link ArityN} created from the {@link ${javadocLink(arity)}}
	 */
	public static <O> Functions.ArityN<O> nary(${functionArity(arity)}${wildcardGenerics(arity)} f) {

		// NB f must be cast to accept a set of input Objects for apply
		@SuppressWarnings("unchecked")
		${functionArity(arity)}${objectGenerics(arity)} func =
			(${functionArity(arity)}${objectGenerics(arity)}) f;

		return new ArityN<>() {

			@Override
			public O apply(Object... ins) {
				return func.${fMethod(arity)}(${insArgs(arity)});
			}

			@Override
			public ${functionArity(arity)}${wildcardGenerics(arity)} getOp() {
				return f;
			}
		};
	}"""

        text += "}"
    }
}