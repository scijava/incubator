package templates

import main.plusAssign
import java.io.File

class OpBuilder(sourceDir: File) : Globals(sourceDir, "OpBuilder") {

    val arities = 1..maxArity

    fun inplaceMatchNumber(arity: Int, num: Int) = if (arity == 1) "" else "$num"

    override fun generics(arity: Int) =
        if (arity == 0) "<O>"
        else "<${(1..arity).joinToString { "I$it" }}, O>"

    fun genericsWithoutOutput(arity: Int) =
        if (arity == 1) "<I1>"
        else
            "<${(1..arity).joinToString { "I$it" }}>"

    fun genericsWildcardFunction(arity: Int) =
        if (arity == 0) "<?>"
        else
            '<' + (1..arity).joinToString { "I$it" } + ", ?>"

    fun inputObjectsArgs(arity: Int) = (1..arity).joinToString { "final I$it in$it" }

    fun inputObjects(arity: Int) = (1..arity).joinToString { "in$it" }

    fun inputClassesArgs(arity: Int) = (1..arity).joinToString { "final Class<I$it> in${it}Class" }

    fun inputClassesToTypes(arity: Int) = (1..arity).joinToString { "Nil.of(in${it}Class)" }

    fun inputTypesArgs(arity: Int) =
        if (arity == 0) ""
        else
            (1..arity).joinToString { "final Nil<I$it> in${it}Type" }

    fun inputTypesFromArgs(arity: Int) = (1..arity).joinToString { "type(in$it)" }

    fun inputTypesArgsWithOutput(arity: Int) =
        if (arity == 0) "final Nil<O> outType"
        else
            (1..arity).joinToString { "final Nil<I$it> in${it}Type" } + ", final Nil<O> outType"

    fun inputTypes(arity: Int) =
        if (arity == 0) ""
        else (1..arity).joinToString { "in${it}Type" }

    fun inputTypesWithOutput(arity: Int) =
        if (arity == 0) "outType"
        else (1..arity).joinToString { "in${it}Type" } + ", outType"

    fun simplifiedClass(arity: Int, num: Int) = simplifiedInplace(arity, num) + ".class"

    fun inplaceClass(arity: Int, num: Int) = inplaceType(arity, num) + ".class"

    fun matchName(arity: Int, num: Int) = if (arity == 1) "matchInplace" else "matchInplace${num}"

    fun inplaceTypeVarNums(arity: Int, io: Int): List<Any> {
        val a = (1..arity).toList()
        return a.subList(0, io - 1) + 'O' + a.subList(io, arity)
    }

    fun inplaceGenericsList(arity: Int, io: Int) = inplaceTypeVarNums(arity, io).map { "I$it" }

    fun inplaceGenerics(arity: Int, io: Int) = "<${inplaceGenericsList(arity, io).joinToString()}>"

    fun matchParams(arity: Int, io: Int): String =
        inplaceGenericsList(arity, io).joinToString {
            if (it[1] == 'O')
                "final Nil<$it> ${it.toLowerCase()}Type"
            else
                "final Nil<$it> in${it.drop(1)}Type"
        }

    fun typeVarNums(arity: Int, io: Int): List<Any> {
        val a = (1..arity).toList()
        return a.subList(0, io - 1) + 'O' + a.subList(io, arity)
    }

    fun basicParamsList(arity: Int, io: Int): List<String> = typeVarNums(arity, io).map { if (it == 'O') "ioType" else "in${it}Type" }

    fun basicParams(arity: Int, io: Int) = basicParamsList(arity, io).joinToString()

    override fun generate(text: StringBuilder) {
        text += """/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.api;

import java.lang.reflect.Type;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Inplaces;
import org.scijava.function.Producer;
import org.scijava.types.Nil;
import org.scijava.types.Types;

/**
 * Convenience class for looking up and/or executing ops using a builder
 * pattern.
 * <p>
 * TODO: Examples
 * </p>
 *
 * @author Curtis Rueden
 * @author Gabriel Selzer
 */
public class OpBuilder {

	private final OpEnvironment env;
	private final String opName;

	public OpBuilder(final OpEnvironment env, final String opName) {
		this.env = env;
		this.opName = opName;
	}

	/** Specifies the op accepts no inputs&mdash;i.e., a nullary op. */
	public Arity0_OU input() {
		return new Arity0_OU();
	}
"""
        for (arity in arities)
            text += """	/** Specifies $arity input by value. */
	public ${genericsWithoutOutput(arity)} Arity${arity}_IV_OU${genericsWithoutOutput(arity)} input(${inputObjectsArgs(arity)})
	{
		return new Arity${arity}_IV_OU<>(${inputObjects(arity)});
	}

	/** Specifies $arity input by raw type. */
	public ${genericsWithoutOutput(arity)} Arity${arity}_IT_OU${genericsWithoutOutput(arity)} inType(${inputClassesArgs(arity)})
	{
		return inType(${inputClassesToTypes(arity)});
	}

	/** Specifies $arity input by generic type. */
	public ${genericsWithoutOutput(arity)} Arity${arity}_IT_OU${genericsWithoutOutput(arity)} inType(${inputTypesArgs(arity)})
	{
		return new Arity${arity}_IT_OU<>(${inputTypes(arity)});
	}
"""

        text += """	// -- Helper methods --

	@SuppressWarnings({ "unchecked" })
	private <T> Nil<T> type(Object obj) {
		// FIXME: This vacuous T and unsafe cast is wrong.
		return (Nil<T>) Nil.of(env.genericType(obj));
	}

	private void checkComputerRefs(Object... objects) {
		checkRefs(objects.length - 1, "Output", objects);
	}

	private void checkInplaceRefs(int inplaceNo, Object... objects) {
		checkRefs(inplaceNo - 1, "Mutable input " + inplaceNo, objects);
	}

	private void checkRefs(int mutableIndex, String label, Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i == mutableIndex) continue;
			if (objects[mutableIndex] == objects[i]) {
				throw new IllegalArgumentException(label +
					" cannot be same reference as input #" + (i + 1));
			}
		}
	}

	// @formatter:off
	/*
	 * -- HELPER CLASSES --
	 * 
	 * For each arity, there are multiple conditions:
	 * * Input TYPES are given (IT) 
	 * 	1) The output is unspecified (OU): 
	 * 		a) matchable: Function, Inplace
	 * 		b) runnable: none
	 * 	2) The output type is given (OT): 
	 * 		a) matchable: Function, Computer
	 * 		b) runnable: none
	 *  
	 * * Input VALUES are given (IV) (N.B. this case applies for Arity0):
	 * 	1) The output is unspecified (OU): 
	 * 		a) matchable: Function, Inplace
	 * 		b) runnable: apply, mutate
	 * 	2) The output type is given (OT): 
	 * 		a) matchable: Function, Computer
	 * 		b) runnable: apply
	 * 	3) The output value is given (OV): 
	 * 		a) matchable: Computer
	 *  	b) runnable: compute
	 */
	// @formatter:on

	/**
	 * Builder with arity 0, output unspecified.
	 *
	 * @author Curtis Rueden
	 */
	public final class Arity0_OU {

		public <O> Arity0_OV<O> output(final O out) {
			return new Arity0_OV<>(out);
		}

		public <O> Arity0_OT<O> outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		public <O> Arity0_OT<O> outType(final Nil<O> outType) {
			return new Arity0_OT<>(outType);
		}

		public Producer<?> producer() {
			final Nil<Producer<Object>> specialType = new Nil<>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] {
						Object.class });
				}
			};
			return env.op(opName, specialType, new Nil<?>[0], Nil.of(
				Object.class));
		}

		public Producer<?> producer(final Hints hints) {
			final Nil<Producer<Object>> specialType = new Nil<>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] {
						Object.class });
				}
			};
			return env.op(opName, specialType, new Nil<?>[0], Nil.of(
				Object.class, hints));
		}

		public Object create() {
			return producer().create();
		}

		public Object create(final Hints hints) {
			return producer(hints).create();
		}
	}

	/**
	 * Builder with arity 0, output type given.
	 *
	 * @author Curtis Rueden
	 * @param <O> The type of the output.
	 */
	public final class Arity0_OT<O> {

		private final Nil<O> outType;

		public Arity0_OT(final Nil<O> outType) {
			this.outType = outType;
		}

		public Producer<O> producer() {
			final Nil<Producer<O>> specialType = new Nil<>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] { outType
						.getType() });
				}
			};
			return env.op(opName, specialType, new Nil<?>[0], outType);
		}

		public Producer<O> producer(final Hints hints) {
			final Nil<Producer<O>> specialType = new Nil<>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] { outType
						.getType() });
				}
			};
			return env.op(opName, specialType, new Nil<?>[0], outType, hints);
		}

		public Computers.Arity0<O> computer() {
			return matchComputer(env, opName, outType);
		}

		public O create() {
			return producer().create();
		}

		public Computers.Arity0<O> computer(Hints hints) {
			return matchComputer(env, opName, outType, hints);
		}

		public O create(Hints hints) {
			return producer(hints).create();
		}

	}

	/**
	 * Builder with arity 0, output value given.
	 *
	 * @author Curtis Rueden
	 * @param <O> The type of the output.
	 */
	public final class Arity0_OV<O> {

		private final O out;

		public Arity0_OV(final O out) {
			this.out = out;
		}

		public Computers.Arity0<O> computer() {
			return matchComputer(env, opName, type(out));
		}

		public void compute() {
			computer().compute(out);
		}

		public Computers.Arity0<O> computer(final Hints hints) {
			return matchComputer(env, opName, type(out), hints);
		}

		public void compute(final Hints hints) {
			computer(hints).compute(out);
		}

	}
"""
        for (arity in arities) {

            text += """	/**
	 * Builder with arity $arity, input type given, output type given.
	 *
	 * @author Curtis Rueden"""

            for (a in 1..arity)
                text += "\t* @param <I$a> The type of input $a."

            text += """	 * @param <O> The type of the output.
	 */
	public final class Arity${arity}_IT_OT${generics(arity)} {
"""

            for (a in 1..arity)
                text += "\t\tprivate final Nil<I$a> in${a}Type;"

            text +="""		private final Nil<O> outType;

		public Arity${arity}_IT_OT(${inputTypesArgsWithOutput(arity)})
		{"""

            for(a in 1..arity)
                text += "\t\t\tthis.in${a}Type = in${a}Type;"

            text += """			this.outType = outType;
		}

		public ${functionArity(arity)}${generics(arity)} function() {
			return matchFunction(env, opName, ${inputTypesWithOutput(arity)});
		}

		public ${functionArity(arity)}${generics(arity)} function(final Hints hints) {
			return matchFunction(env, opName, ${inputTypesWithOutput(arity)}, hints);
		}

		public Computers.Arity$arity${generics(arity)} computer() {
			return matchComputer(env, opName, ${inputTypesWithOutput(arity)});
		}

		public Computers.Arity$arity${generics(arity)} computer(final Hints hints) {
			return matchComputer(env, opName, ${inputTypesWithOutput(arity)}, hints);
		}
"""

            for(a in 1..arity)
                text +="""		public Inplaces.Arity${inplaceSuffix(arity, a)}${genericsWithoutOutput(arity)} inplace${inplaceMatchNumber(arity, a)}() {
			return matchInplace${inplaceMatchNumber(arity, a)}(env, opName, ${inputTypes(arity)});
		}
"""

            text += """	}

	/**
	 * Builder with arity $arity, input type given, output unspecified.
	 *
	 * @author Curtis Rueden"""

            for(a in 1..arity)
                text += "\t* @param <I$a> The type of input $a."

            text += """	 */
	public final class Arity${arity}_IT_OU${genericsWithoutOutput(arity)} {
"""

            for(a in 1..arity)
                text += "\t\tprivate final Nil<I$a> in${a}Type;"

            text += """
		public Arity${arity}_IT_OU(${inputTypesArgs(arity)})
		{"""

            for(a in 1..arity)
                text+="\t\t\tthis.in${a}Type = in${a}Type;"

            text += """		}

		public <O> Arity${arity}_IT_OT${generics(arity)} outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		public <O> Arity${arity}_IT_OT${generics(arity)} outType(final Nil<O> outType) {
			return new Arity${arity}_IT_OT<>(${inputTypesWithOutput(arity)});
		}

		public ${functionArity(arity)}${genericsWildcardFunction(arity)} function() {
			return matchFunction(env, opName, ${inputTypes(arity)}, Nil.of(Object.class));
		}

		public ${functionArity(arity)}${genericsWildcardFunction(arity)} function(final Hints hints) {
			return matchFunction(env, opName, ${inputTypes(arity)}, Nil.of(Object.class), hints);
		}
"""

            for(a in 1..arity)
                text += """		public Inplaces.Arity${inplaceSuffix(arity, a)}${genericsWithoutOutput(arity)} inplace${inplaceMatchNumber(arity, a)}() {
			return matchInplace${inplaceMatchNumber(arity, a)}(env, opName, ${inputTypes(arity)});
		}
"""

            text += """	}

	/**
	 * Builder with arity $arity, input value given, output type given.
	 *
	 * @author Curtis Rueden"""

            for(a in 1..arity)
                text += "\t* @param <I$a> The type of input $a."

            text += """	 * @param <O> The type of the output.
	 */
	public final class Arity${arity}_IV_OT${generics(arity)} {
"""

            for(a in 1..arity)
                text += "\t\tprivate final I$a in${a};"

            text += """		private final Nil<O> outType;

		public Arity${arity}_IV_OT(${inputObjectsArgs(arity)}, final Nil<O> outType)
		{"""

            for(a in 1..arity)
                text += "\t\t\tthis.in$a = in$a;"

            text += """			this.outType = outType;
		}

		public ${functionArity(arity)}${generics(arity)} function() {
			return matchFunction(env, opName, ${inputTypesFromArgs(arity)}, outType);
		}
	
		public ${functionArity(arity)}${generics(arity)} function(final Hints hints) {
			return matchFunction(env, opName, ${inputTypesFromArgs(arity)}, outType, hints);
		}
	
		public Computers.Arity$arity${generics(arity)} computer() {
			return matchComputer(env, opName, ${inputTypesFromArgs(arity)}, outType);
		}

		public Computers.Arity$arity${generics(arity)} computer(final Hints hints) {
			return matchComputer(env, opName, ${inputTypesFromArgs(arity)}, outType, hints);
		}
	
		public O apply() {
			return function().apply(${inputObjects(arity)});
		}

		public O apply(final Hints hints) {
			return function(hints).apply(${inputObjects(arity)});
		}
	}

	/**
	 * Builder with arity $arity, input value given, output unspecified.
	 *
	 * @author Curtis Rueden"""

            for(a in 1..arity)
                text += "\t* @param <I$a> The type of input $a."

            text += """	 */
	public final class Arity${arity}_IV_OU${genericsWithoutOutput(arity)} {
"""

            for(a in 1..arity)
                text += "\t\tprivate final I$a in$a;"

            text += """
		public Arity${arity}_IV_OU(${inputObjectsArgs(arity)})
		{"""

            for(a in 1..arity)
                text += "\t\t\tthis.in$a = in$a;"

            text += """		}

		public <O> Arity${arity}_IV_OV${generics(arity)} output(final O out) {
			checkComputerRefs(${inputObjects(arity)}, out);
			return new Arity${arity}_IV_OV<>(${inputObjects(arity)}, out);
		}

		public <O> Arity${arity}_IV_OT${generics(arity)} outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		public <O> Arity${arity}_IV_OT${generics(arity)} outType(final Nil<O> outType) {
			return new Arity${arity}_IV_OT<>(${inputObjects(arity)}, outType);
		}

		public ${functionArity(arity)}${genericsWildcardFunction(arity)} function() {
			return matchFunction(env, opName, ${inputTypesFromArgs(arity)}, Nil.of(Object.class));
		}

		public ${functionArity(arity)}${genericsWildcardFunction(arity)} function(final Hints hints) {
			return matchFunction(env, opName, ${inputTypesFromArgs(arity)}, Nil.of(Object.class), hints);
		}
"""

            for(a in 1..arity)
                text += """		public Inplaces.Arity${inplaceSuffix(arity, a)}${genericsWithoutOutput(arity)} inplace${inplaceMatchNumber(arity, a)}() {
			checkInplaceRefs($a, ${inputObjects(arity)});
			return matchInplace${inplaceMatchNumber(arity, a)}(env, opName, ${inputTypesFromArgs(arity)});
		}
"""

            for(a in 1..arity)
                text += """		public Inplaces.Arity${inplaceSuffix(arity, a)}${genericsWithoutOutput(arity)} inplace${inplaceMatchNumber(arity, a)}(final Hints hints) {
			checkInplaceRefs($a, ${inputObjects(arity)});
			return matchInplace${inplaceMatchNumber(arity, a)}(env, opName, ${inputTypesFromArgs(arity)}, hints);
		}
"""

            text += """		public Object apply() {
			return function().apply(${inputObjects(arity)});
		}

		public Object apply(final Hints hints) {
			return function(hints).apply(${inputObjects(arity)});
		}
"""

            for(a in 1..arity)
                text += """		public void mutate${inplaceMatchNumber(arity, a)}() {
			inplace${inplaceMatchNumber(arity, a)}().mutate(${inputObjects(arity)});
		}
"""

            for(a in 1..arity)
                text += """		public void mutate${inplaceMatchNumber(arity, a)}(final Hints hints) {
			inplace${inplaceMatchNumber(arity, a)}(hints).mutate(${inputObjects(arity)});
		}
"""

            text += """	}

	/**
	 * Builder with arity $arity, input value given, output value given.
	 *
	 * @author Curtis Rueden"""

            for(a in 1..arity)
                text += "\t* @param <I$a> The type of input $a."

            text += """	 */
	public final class Arity${arity}_IV_OV${generics(arity)} {
"""

            for(a in 1..arity)
                text += "\t\tprivate final I$a in$a;"

            text += """		private final O out;

		public Arity${arity}_IV_OV(${inputObjectsArgs(arity)}, final O out)
		{"""

            for(a in 1..arity)
                text += "\t\t\tthis.in$a = in$a;"

            text += """			this.out = out;
		}

		public Computers.Arity$arity${generics(arity)} computer() {
			return matchComputer(env, opName, ${inputTypesFromArgs(arity)}, type(out));
		}

		public void compute() {
			computer().compute(${inputObjects(arity)}, out);
		}

		public Computers.Arity${arity}${generics(arity)} computer(final Hints hints) {
			return matchComputer(env, opName, ${inputTypesFromArgs(arity)}, type(out), hints);
		}

		public void compute(final Hints hints) {
			computer(hints).compute(${inputObjects(arity)}, out);
		}

	}"""
        }

        for(arity in 0..maxArity)
            text += """	@SuppressWarnings({ "unchecked" })
	public static ${generics(arity)} ${functionArity(arity)}${generics(arity)} matchFunction(final OpEnvironment env, final String opName, ${inputTypesArgsWithOutput(arity)})
	{
		return matchFunctionHelper(env, opName, ${functionArity(arity)}.class, outType${if(arity == 0) "" else ", "}${inputTypes(arity)});
	}
"""

        for(arity in 0..maxArity)
            text += """	@SuppressWarnings({ "unchecked" })
	public static ${generics(arity)} ${functionArity(arity)}${generics(arity)} matchFunction(final OpEnvironment env, final String opName, ${inputTypesArgsWithOutput(arity)}, final Hints hints)
	{
		return matchFunctionHelper(env, opName, hints, ${functionArity(arity)}.class, outType${if(arity == 0) "" else ", "}${inputTypes(arity)});
	}
"""

        text += """	@SuppressWarnings({ "unchecked" })
	private static <T> T matchFunctionHelper(final OpEnvironment env, final String opName,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType);
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchFunctionHelper(final OpEnvironment env, final String opName, final Hints hints,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType, hints);
	}
"""

        for(arity in 0..maxArity)
            text += """	@SuppressWarnings("unchecked")
	public static ${generics(arity)} ${computerArity(arity)}${generics(arity)} matchComputer(final OpEnvironment env, final String opName, ${inputTypesArgsWithOutput(arity)})
	{
		return matchComputerHelper(env, opName, ${computerArity(arity)}.class, outType${if(arity == 0)"" else ", "}${inputTypes(arity)});
	}
"""

        for(arity in 0..maxArity)
            text += """	@SuppressWarnings("unchecked")
	public static ${generics(arity)} ${computerArity(arity)}${generics(arity)} matchComputer(final OpEnvironment env, final String opName, ${inputTypesArgsWithOutput(arity)}, final Hints hints)
	{
		return matchComputerHelper(env, opName, hints, ${computerArity(arity)}.class, outType${if(arity == 0)"" else ", "}${inputTypes(arity)});
	}
"""

        text += """	@SuppressWarnings({ "unchecked" })
	private static <T> T matchComputerHelper(final OpEnvironment env, final String opName, final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		final Nil<?>[] nils = new Nil[inTypes.length + 1];
		System.arraycopy(inTypes, 0, nils, 0, inTypes.length);
		nils[nils.length - 1] = outType;
		return (T) env.op(opName, Nil.of(specialType), nils, outType);
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchComputerHelper(final OpEnvironment env, final String opName, final Hints hints, final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		final Nil<?>[] nils = new Nil[inTypes.length + 1];
		System.arraycopy(inTypes, 0, nils, 0, inTypes.length);
		nils[nils.length - 1] = outType;
		return (T) env.op(opName, Nil.of(specialType), nils, outType, hints);
	}
"""

        for(arity in arities)
            for(a in 1..arity)
                text += """	@SuppressWarnings({ "unchecked" })
	public static ${inplaceGenerics(arity, a)} ${inplaceType(arity, a)}${inplaceGenerics(arity, a)} ${matchName(arity, a)}(final OpEnvironment env, final String opName, ${matchParams(arity, a)})
	{
		return matchInplaceHelper(env, opName, ${inplaceClass(arity, a)}, ioType, new Nil[] {${basicParams(arity, a)}});
	}
"""

        for(arity in arities)
            for(a in 1..arity)
                text += """	@SuppressWarnings({ "unchecked" })
	public static ${inplaceGenerics(arity, a)} ${inplaceType(arity, a)}${inplaceGenerics(arity, a)} ${matchName(arity, a)}(final OpEnvironment env, final String opName, ${matchParams(arity, a)}, final Hints hints)
	{
		return matchInplaceHelper(env, opName, hints, ${inplaceType(arity, a)}.class, ioType, new Nil[] {${basicParams(arity, a)}});
	}
"""

        text += """	@SuppressWarnings({ "unchecked" })
	private static <T> T matchInplaceHelper(final OpEnvironment env, final String opName,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType);
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchInplaceHelper(final OpEnvironment env, final String opName, final Hints hints,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType, hints);
	}
}
"""
    }
}