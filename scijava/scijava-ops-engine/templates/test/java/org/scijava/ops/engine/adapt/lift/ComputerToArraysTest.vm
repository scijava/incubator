/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import org.junit.Test;
import org.junit.jupiter.api.Assertions;
import org.scijava.function.Computers;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpCollection;
import org.scijava.ops.engine.AbstractTestEnvironment;
import org.scijava.plugin.Plugin;

/**
 * Tests the adaptation of {@link Computers} running on a type into
 * {@link Computers} running on arrays of that type.
 * 
 * @author Gabriel Selzer
 */
@Plugin(type = OpCollection.class)
public class ComputerToArraysTest extends AbstractTestEnvironment {
	
	/**
	 * @author Gabriel Selzer
	 */
	private class NumericalThing extends AbstractTestEnvironment {

		private int number;

		public NumericalThing() {
			number = -1;
		}

		public NumericalThing(int num) {
			number = num;
		}

		public void setNumber(int newNum) {
			number = newNum;
		}

		public int getNumber() {
			return number;
		}
	}
	
#foreach($arity in [0..$maxArity])
	@OpField(names = "test.liftArrayC")
	public final $computerArity.call($arity)$numericalGenerics.call($arity) alterThing$arity = ($computeArgs.call($arity)) -> {out.setNumber($getNumbers.call($arity));};

	@Test
	public void testComputer${arity}ToArrays() {
		NumericalThing[] input = {new NumericalThing(0), new NumericalThing(1), new NumericalThing(2)};
		NumericalThing[] output = {new NumericalThing(), new NumericalThing(), new NumericalThing()};
		ops.env().op("test.liftArrayC").input($inputArgs.call($arity)).output(output).compute();

		for(int i = 0; i < output.length; i++) {
			Assertions.assertEquals($arity * i, output[i].getNumber());
		}
	}

#end
}
