///*
// * #%L
// * ImageJ2 software for multidimensional image processing and analysis.
// * %%
// * Copyright (C) 2014 - 2023 ImageJ2 developers.
// * %%
// * Redistribution and use in source and binary forms, with or without
// * modification, are permitted provided that the following conditions are met:
// *
// * 1. Redistributions of source code must retain the above copyright notice,
// *    this list of conditions and the following disclaimer.
// * 2. Redistributions in binary form must reproduce the above copyright notice,
// *    this list of conditions and the following disclaimer in the documentation
// *    and/or other materials provided with the distribution.
// *
// * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
// * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// * POSSIBILITY OF SUCH DAMAGE.
// * #L%
// */
//
///*
//* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
//* corresponding template in templates/ and rerun bin/generate.groovy.
//*/
//
//package org.scijava.ops.image.simplify;
//
//import net.imglib2.Dimensions;
//import net.imglib2.RandomAccessibleInterval;
//import net.imglib2.type.logic.BitType;
//import net.imglib2.type.numeric.RealType;
//import net.imglib2.type.numeric.complex.ComplexDoubleType;
//import net.imglib2.type.numeric.complex.ComplexFloatType;
//import net.imglib2.type.numeric.integer.ByteType;
//import net.imglib2.type.numeric.integer.IntType;
//import net.imglib2.type.numeric.integer.LongType;
//import net.imglib2.type.numeric.integer.ShortType;
//import net.imglib2.type.numeric.integer.Unsigned128BitType;
//import net.imglib2.type.numeric.integer.Unsigned12BitType;
//import net.imglib2.type.numeric.integer.Unsigned2BitType;
//import net.imglib2.type.numeric.integer.Unsigned4BitType;
//import net.imglib2.type.numeric.integer.UnsignedByteType;
//import net.imglib2.type.numeric.integer.UnsignedIntType;
//import net.imglib2.type.numeric.integer.UnsignedLongType;
//import net.imglib2.type.numeric.integer.UnsignedShortType;
//import net.imglib2.type.numeric.real.DoubleType;
//import net.imglib2.type.numeric.real.FloatType;
//import org.scijava.function.Computers;
//import org.scijava.ops.spi.OpDependency;
//
//import java.util.function.BiFunction;
//import java.util.function.Function;
//
//public class RAIFocusers {
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class BitTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, BitType> {
//		public BitTypeFocuser() {
//			super(new BitType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class Unsigned2BitTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, Unsigned2BitType> {
//		public Unsigned2BitTypeFocuser() {
//			super(new Unsigned2BitType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class Unsigned4BitTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, Unsigned4BitType> {
//		public Unsigned4BitTypeFocuser() {
//			super(new Unsigned4BitType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class UnsignedByteTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, UnsignedByteType> {
//		public UnsignedByteTypeFocuser() {
//			super(new UnsignedByteType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class ByteTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, ByteType> {
//		public ByteTypeFocuser() {
//			super(new ByteType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class UnsignedShortTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, UnsignedShortType> {
//		public UnsignedShortTypeFocuser() {
//			super(new UnsignedShortType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class ShortTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, ShortType> {
//		public ShortTypeFocuser() {
//			super(new ShortType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class Unsigned12BitTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, Unsigned12BitType> {
//		public Unsigned12BitTypeFocuser() {
//			super(new Unsigned12BitType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class UnsignedIntTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, UnsignedIntType> {
//		public UnsignedIntTypeFocuser() {
//			super(new UnsignedIntType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class IntTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, IntType> {
//		public IntTypeFocuser() {
//			super(new IntType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class UnsignedLongTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, UnsignedLongType> {
//		public UnsignedLongTypeFocuser() {
//			super(new UnsignedLongType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class LongTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, LongType> {
//		public LongTypeFocuser() {
//			super(new LongType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class Unsigned128BitTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, Unsigned128BitType> {
//		public Unsigned128BitTypeFocuser() {
//			super(new Unsigned128BitType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class FloatTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, FloatType> {
//		public FloatTypeFocuser() {
//			super(new FloatType());
//		}
//	}
//
//	/**
//	 * @implNote op names='engine.focus', type=Function
//	 */
//	public static class DoubleTypeFocuser<T extends RealType<T>> extends RAIFocuser<T, DoubleType> {
//		public DoubleTypeFocuser() {
//			super(new DoubleType());
//		}
//	}
//
//	private static class RAIFocuser<T extends RealType<T>, U extends RealType<U>> implements
//		Function<RandomAccessibleInterval<T>, RandomAccessibleInterval<U>> {
//
//		@OpDependency(name="create.img")
//		private BiFunction<Dimensions, U, RandomAccessibleInterval<U>> creator;
//		@OpDependency(name="engine.copy")
//		Computers.Arity1<RandomAccessibleInterval<? extends RealType<?>>, RandomAccessibleInterval<U>> copier;
//
//		private final U template;
//
//		public RAIFocuser(U element) {
//			template = element;
//		}
//
//		/**
//		 * @param in the simple {@link RandomAccessibleInterval}
//		 * @return a focused version of {@code in}
//		 */
//		@Override
//		public RandomAccessibleInterval<U> apply(
//			RandomAccessibleInterval<T> in)
//		{
//			var out = creator.apply(in, template);
//			copier.compute(in, out);
//			return out;
//		}
//	}
//}
